# coding: utf-8

"""
    Moosend API

    TODO: Add a description

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Campaign(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ab_campaign_type': 'float',
        'ab_hours_to_test': 'float',
        'ab_winner': 'float',
        'ab_winner_selection_type': 'float',
        'confirmation_to': 'str',
        'created_on': 'str',
        'delivered_on': 'str',
        'id': 'str',
        'is_transactional': 'bool',
        'mailing_lists': 'list[MailingList68]',
        'name': 'str',
        'recipients_count': 'float',
        'scheduled_for': 'str',
        'scheduled_for_timezone': 'str',
        'site_name': 'str',
        'status': 'float',
        'subject': 'str',
        'total_bounces': 'float',
        'total_complaints': 'float',
        'total_forwards': 'float',
        'total_link_clicks': 'float',
        'total_opens': 'float',
        'total_sent': 'float',
        'total_unsubscribes': 'float',
        'unique_forwards': 'float',
        'unique_link_clicks': 'float',
        'unique_opens': 'float'
    }

    attribute_map = {
        'ab_campaign_type': 'ABCampaignType',
        'ab_hours_to_test': 'ABHoursToTest',
        'ab_winner': 'ABWinner',
        'ab_winner_selection_type': 'ABWinnerSelectionType',
        'confirmation_to': 'ConfirmationTo',
        'created_on': 'CreatedOn',
        'delivered_on': 'DeliveredOn',
        'id': 'ID',
        'is_transactional': 'IsTransactional',
        'mailing_lists': 'MailingLists',
        'name': 'Name',
        'recipients_count': 'RecipientsCount',
        'scheduled_for': 'ScheduledFor',
        'scheduled_for_timezone': 'ScheduledForTimezone',
        'site_name': 'SiteName',
        'status': 'Status',
        'subject': 'Subject',
        'total_bounces': 'TotalBounces',
        'total_complaints': 'TotalComplaints',
        'total_forwards': 'TotalForwards',
        'total_link_clicks': 'TotalLinkClicks',
        'total_opens': 'TotalOpens',
        'total_sent': 'TotalSent',
        'total_unsubscribes': 'TotalUnsubscribes',
        'unique_forwards': 'UniqueForwards',
        'unique_link_clicks': 'UniqueLinkClicks',
        'unique_opens': 'UniqueOpens'
    }

    def __init__(self, ab_campaign_type=None, ab_hours_to_test=None, ab_winner=None, ab_winner_selection_type=None, confirmation_to=None, created_on=None, delivered_on=None, id=None, is_transactional=None, mailing_lists=None, name=None, recipients_count=None, scheduled_for=None, scheduled_for_timezone=None, site_name=None, status=None, subject=None, total_bounces=None, total_complaints=None, total_forwards=None, total_link_clicks=None, total_opens=None, total_sent=None, total_unsubscribes=None, unique_forwards=None, unique_link_clicks=None, unique_opens=None):
        """
        Campaign - a model defined in Swagger
        """

        self._ab_campaign_type = None
        self._ab_hours_to_test = None
        self._ab_winner = None
        self._ab_winner_selection_type = None
        self._confirmation_to = None
        self._created_on = None
        self._delivered_on = None
        self._id = None
        self._is_transactional = None
        self._mailing_lists = None
        self._name = None
        self._recipients_count = None
        self._scheduled_for = None
        self._scheduled_for_timezone = None
        self._site_name = None
        self._status = None
        self._subject = None
        self._total_bounces = None
        self._total_complaints = None
        self._total_forwards = None
        self._total_link_clicks = None
        self._total_opens = None
        self._total_sent = None
        self._total_unsubscribes = None
        self._unique_forwards = None
        self._unique_link_clicks = None
        self._unique_opens = None

        if ab_campaign_type is not None:
          self.ab_campaign_type = ab_campaign_type
        if ab_hours_to_test is not None:
          self.ab_hours_to_test = ab_hours_to_test
        if ab_winner is not None:
          self.ab_winner = ab_winner
        if ab_winner_selection_type is not None:
          self.ab_winner_selection_type = ab_winner_selection_type
        if confirmation_to is not None:
          self.confirmation_to = confirmation_to
        if created_on is not None:
          self.created_on = created_on
        if delivered_on is not None:
          self.delivered_on = delivered_on
        if id is not None:
          self.id = id
        if is_transactional is not None:
          self.is_transactional = is_transactional
        if mailing_lists is not None:
          self.mailing_lists = mailing_lists
        if name is not None:
          self.name = name
        if recipients_count is not None:
          self.recipients_count = recipients_count
        if scheduled_for is not None:
          self.scheduled_for = scheduled_for
        if scheduled_for_timezone is not None:
          self.scheduled_for_timezone = scheduled_for_timezone
        if site_name is not None:
          self.site_name = site_name
        if status is not None:
          self.status = status
        if subject is not None:
          self.subject = subject
        if total_bounces is not None:
          self.total_bounces = total_bounces
        if total_complaints is not None:
          self.total_complaints = total_complaints
        if total_forwards is not None:
          self.total_forwards = total_forwards
        if total_link_clicks is not None:
          self.total_link_clicks = total_link_clicks
        if total_opens is not None:
          self.total_opens = total_opens
        if total_sent is not None:
          self.total_sent = total_sent
        if total_unsubscribes is not None:
          self.total_unsubscribes = total_unsubscribes
        if unique_forwards is not None:
          self.unique_forwards = unique_forwards
        if unique_link_clicks is not None:
          self.unique_link_clicks = unique_link_clicks
        if unique_opens is not None:
          self.unique_opens = unique_opens

    @property
    def ab_campaign_type(self):
        """
        Gets the ab_campaign_type of this Campaign.
        

        :return: The ab_campaign_type of this Campaign.
        :rtype: float
        """
        return self._ab_campaign_type

    @ab_campaign_type.setter
    def ab_campaign_type(self, ab_campaign_type):
        """
        Sets the ab_campaign_type of this Campaign.
        

        :param ab_campaign_type: The ab_campaign_type of this Campaign.
        :type: float
        """

        self._ab_campaign_type = ab_campaign_type

    @property
    def ab_hours_to_test(self):
        """
        Gets the ab_hours_to_test of this Campaign.
        

        :return: The ab_hours_to_test of this Campaign.
        :rtype: float
        """
        return self._ab_hours_to_test

    @ab_hours_to_test.setter
    def ab_hours_to_test(self, ab_hours_to_test):
        """
        Sets the ab_hours_to_test of this Campaign.
        

        :param ab_hours_to_test: The ab_hours_to_test of this Campaign.
        :type: float
        """

        self._ab_hours_to_test = ab_hours_to_test

    @property
    def ab_winner(self):
        """
        Gets the ab_winner of this Campaign.
        

        :return: The ab_winner of this Campaign.
        :rtype: float
        """
        return self._ab_winner

    @ab_winner.setter
    def ab_winner(self, ab_winner):
        """
        Sets the ab_winner of this Campaign.
        

        :param ab_winner: The ab_winner of this Campaign.
        :type: float
        """

        self._ab_winner = ab_winner

    @property
    def ab_winner_selection_type(self):
        """
        Gets the ab_winner_selection_type of this Campaign.
        

        :return: The ab_winner_selection_type of this Campaign.
        :rtype: float
        """
        return self._ab_winner_selection_type

    @ab_winner_selection_type.setter
    def ab_winner_selection_type(self, ab_winner_selection_type):
        """
        Sets the ab_winner_selection_type of this Campaign.
        

        :param ab_winner_selection_type: The ab_winner_selection_type of this Campaign.
        :type: float
        """

        self._ab_winner_selection_type = ab_winner_selection_type

    @property
    def confirmation_to(self):
        """
        Gets the confirmation_to of this Campaign.
        

        :return: The confirmation_to of this Campaign.
        :rtype: str
        """
        return self._confirmation_to

    @confirmation_to.setter
    def confirmation_to(self, confirmation_to):
        """
        Sets the confirmation_to of this Campaign.
        

        :param confirmation_to: The confirmation_to of this Campaign.
        :type: str
        """

        self._confirmation_to = confirmation_to

    @property
    def created_on(self):
        """
        Gets the created_on of this Campaign.
        

        :return: The created_on of this Campaign.
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this Campaign.
        

        :param created_on: The created_on of this Campaign.
        :type: str
        """

        self._created_on = created_on

    @property
    def delivered_on(self):
        """
        Gets the delivered_on of this Campaign.
        

        :return: The delivered_on of this Campaign.
        :rtype: str
        """
        return self._delivered_on

    @delivered_on.setter
    def delivered_on(self, delivered_on):
        """
        Sets the delivered_on of this Campaign.
        

        :param delivered_on: The delivered_on of this Campaign.
        :type: str
        """

        self._delivered_on = delivered_on

    @property
    def id(self):
        """
        Gets the id of this Campaign.
        

        :return: The id of this Campaign.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Campaign.
        

        :param id: The id of this Campaign.
        :type: str
        """

        self._id = id

    @property
    def is_transactional(self):
        """
        Gets the is_transactional of this Campaign.
        

        :return: The is_transactional of this Campaign.
        :rtype: bool
        """
        return self._is_transactional

    @is_transactional.setter
    def is_transactional(self, is_transactional):
        """
        Sets the is_transactional of this Campaign.
        

        :param is_transactional: The is_transactional of this Campaign.
        :type: bool
        """

        self._is_transactional = is_transactional

    @property
    def mailing_lists(self):
        """
        Gets the mailing_lists of this Campaign.
        

        :return: The mailing_lists of this Campaign.
        :rtype: list[MailingList68]
        """
        return self._mailing_lists

    @mailing_lists.setter
    def mailing_lists(self, mailing_lists):
        """
        Sets the mailing_lists of this Campaign.
        

        :param mailing_lists: The mailing_lists of this Campaign.
        :type: list[MailingList68]
        """

        self._mailing_lists = mailing_lists

    @property
    def name(self):
        """
        Gets the name of this Campaign.
        

        :return: The name of this Campaign.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Campaign.
        

        :param name: The name of this Campaign.
        :type: str
        """

        self._name = name

    @property
    def recipients_count(self):
        """
        Gets the recipients_count of this Campaign.
        

        :return: The recipients_count of this Campaign.
        :rtype: float
        """
        return self._recipients_count

    @recipients_count.setter
    def recipients_count(self, recipients_count):
        """
        Sets the recipients_count of this Campaign.
        

        :param recipients_count: The recipients_count of this Campaign.
        :type: float
        """

        self._recipients_count = recipients_count

    @property
    def scheduled_for(self):
        """
        Gets the scheduled_for of this Campaign.
        

        :return: The scheduled_for of this Campaign.
        :rtype: str
        """
        return self._scheduled_for

    @scheduled_for.setter
    def scheduled_for(self, scheduled_for):
        """
        Sets the scheduled_for of this Campaign.
        

        :param scheduled_for: The scheduled_for of this Campaign.
        :type: str
        """

        self._scheduled_for = scheduled_for

    @property
    def scheduled_for_timezone(self):
        """
        Gets the scheduled_for_timezone of this Campaign.
        

        :return: The scheduled_for_timezone of this Campaign.
        :rtype: str
        """
        return self._scheduled_for_timezone

    @scheduled_for_timezone.setter
    def scheduled_for_timezone(self, scheduled_for_timezone):
        """
        Sets the scheduled_for_timezone of this Campaign.
        

        :param scheduled_for_timezone: The scheduled_for_timezone of this Campaign.
        :type: str
        """

        self._scheduled_for_timezone = scheduled_for_timezone

    @property
    def site_name(self):
        """
        Gets the site_name of this Campaign.
        

        :return: The site_name of this Campaign.
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """
        Sets the site_name of this Campaign.
        

        :param site_name: The site_name of this Campaign.
        :type: str
        """

        self._site_name = site_name

    @property
    def status(self):
        """
        Gets the status of this Campaign.
        

        :return: The status of this Campaign.
        :rtype: float
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Campaign.
        

        :param status: The status of this Campaign.
        :type: float
        """

        self._status = status

    @property
    def subject(self):
        """
        Gets the subject of this Campaign.
        

        :return: The subject of this Campaign.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this Campaign.
        

        :param subject: The subject of this Campaign.
        :type: str
        """

        self._subject = subject

    @property
    def total_bounces(self):
        """
        Gets the total_bounces of this Campaign.
        

        :return: The total_bounces of this Campaign.
        :rtype: float
        """
        return self._total_bounces

    @total_bounces.setter
    def total_bounces(self, total_bounces):
        """
        Sets the total_bounces of this Campaign.
        

        :param total_bounces: The total_bounces of this Campaign.
        :type: float
        """

        self._total_bounces = total_bounces

    @property
    def total_complaints(self):
        """
        Gets the total_complaints of this Campaign.
        

        :return: The total_complaints of this Campaign.
        :rtype: float
        """
        return self._total_complaints

    @total_complaints.setter
    def total_complaints(self, total_complaints):
        """
        Sets the total_complaints of this Campaign.
        

        :param total_complaints: The total_complaints of this Campaign.
        :type: float
        """

        self._total_complaints = total_complaints

    @property
    def total_forwards(self):
        """
        Gets the total_forwards of this Campaign.
        

        :return: The total_forwards of this Campaign.
        :rtype: float
        """
        return self._total_forwards

    @total_forwards.setter
    def total_forwards(self, total_forwards):
        """
        Sets the total_forwards of this Campaign.
        

        :param total_forwards: The total_forwards of this Campaign.
        :type: float
        """

        self._total_forwards = total_forwards

    @property
    def total_link_clicks(self):
        """
        Gets the total_link_clicks of this Campaign.
        

        :return: The total_link_clicks of this Campaign.
        :rtype: float
        """
        return self._total_link_clicks

    @total_link_clicks.setter
    def total_link_clicks(self, total_link_clicks):
        """
        Sets the total_link_clicks of this Campaign.
        

        :param total_link_clicks: The total_link_clicks of this Campaign.
        :type: float
        """

        self._total_link_clicks = total_link_clicks

    @property
    def total_opens(self):
        """
        Gets the total_opens of this Campaign.
        

        :return: The total_opens of this Campaign.
        :rtype: float
        """
        return self._total_opens

    @total_opens.setter
    def total_opens(self, total_opens):
        """
        Sets the total_opens of this Campaign.
        

        :param total_opens: The total_opens of this Campaign.
        :type: float
        """

        self._total_opens = total_opens

    @property
    def total_sent(self):
        """
        Gets the total_sent of this Campaign.
        

        :return: The total_sent of this Campaign.
        :rtype: float
        """
        return self._total_sent

    @total_sent.setter
    def total_sent(self, total_sent):
        """
        Sets the total_sent of this Campaign.
        

        :param total_sent: The total_sent of this Campaign.
        :type: float
        """

        self._total_sent = total_sent

    @property
    def total_unsubscribes(self):
        """
        Gets the total_unsubscribes of this Campaign.
        

        :return: The total_unsubscribes of this Campaign.
        :rtype: float
        """
        return self._total_unsubscribes

    @total_unsubscribes.setter
    def total_unsubscribes(self, total_unsubscribes):
        """
        Sets the total_unsubscribes of this Campaign.
        

        :param total_unsubscribes: The total_unsubscribes of this Campaign.
        :type: float
        """

        self._total_unsubscribes = total_unsubscribes

    @property
    def unique_forwards(self):
        """
        Gets the unique_forwards of this Campaign.
        

        :return: The unique_forwards of this Campaign.
        :rtype: float
        """
        return self._unique_forwards

    @unique_forwards.setter
    def unique_forwards(self, unique_forwards):
        """
        Sets the unique_forwards of this Campaign.
        

        :param unique_forwards: The unique_forwards of this Campaign.
        :type: float
        """

        self._unique_forwards = unique_forwards

    @property
    def unique_link_clicks(self):
        """
        Gets the unique_link_clicks of this Campaign.
        

        :return: The unique_link_clicks of this Campaign.
        :rtype: float
        """
        return self._unique_link_clicks

    @unique_link_clicks.setter
    def unique_link_clicks(self, unique_link_clicks):
        """
        Sets the unique_link_clicks of this Campaign.
        

        :param unique_link_clicks: The unique_link_clicks of this Campaign.
        :type: float
        """

        self._unique_link_clicks = unique_link_clicks

    @property
    def unique_opens(self):
        """
        Gets the unique_opens of this Campaign.
        

        :return: The unique_opens of this Campaign.
        :rtype: float
        """
        return self._unique_opens

    @unique_opens.setter
    def unique_opens(self, unique_opens):
        """
        Sets the unique_opens of this Campaign.
        

        :param unique_opens: The unique_opens of this Campaign.
        :type: float
        """

        self._unique_opens = unique_opens

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Campaign):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

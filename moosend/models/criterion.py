# coding: utf-8

"""
    Moosend API

    TODO: Add a description

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Criterion(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comparer': 'float',
        'custom_field_id': 'str',
        'date_from': 'str',
        'date_to': 'str',
        'field': 'float',
        'id': 'float',
        'properties': 'str',
        'segment_id': 'float',
        'subscriteria': 'str',
        'value': 'str'
    }

    attribute_map = {
        'comparer': 'Comparer',
        'custom_field_id': 'CustomFieldID',
        'date_from': 'DateFrom',
        'date_to': 'DateTo',
        'field': 'Field',
        'id': 'ID',
        'properties': 'Properties',
        'segment_id': 'SegmentID',
        'subscriteria': 'Subscriteria',
        'value': 'Value'
    }

    def __init__(self, comparer=None, custom_field_id=None, date_from=None, date_to=None, field=None, id=None, properties=None, segment_id=None, subscriteria=None, value=None):
        """
        Criterion - a model defined in Swagger
        """

        self._comparer = None
        self._custom_field_id = None
        self._date_from = None
        self._date_to = None
        self._field = None
        self._id = None
        self._properties = None
        self._segment_id = None
        self._subscriteria = None
        self._value = None

        if comparer is not None:
          self.comparer = comparer
        if custom_field_id is not None:
          self.custom_field_id = custom_field_id
        if date_from is not None:
          self.date_from = date_from
        if date_to is not None:
          self.date_to = date_to
        if field is not None:
          self.field = field
        if id is not None:
          self.id = id
        if properties is not None:
          self.properties = properties
        if segment_id is not None:
          self.segment_id = segment_id
        if subscriteria is not None:
          self.subscriteria = subscriteria
        if value is not None:
          self.value = value

    @property
    def comparer(self):
        """
        Gets the comparer of this Criterion.
        

        :return: The comparer of this Criterion.
        :rtype: float
        """
        return self._comparer

    @comparer.setter
    def comparer(self, comparer):
        """
        Sets the comparer of this Criterion.
        

        :param comparer: The comparer of this Criterion.
        :type: float
        """

        self._comparer = comparer

    @property
    def custom_field_id(self):
        """
        Gets the custom_field_id of this Criterion.
        

        :return: The custom_field_id of this Criterion.
        :rtype: str
        """
        return self._custom_field_id

    @custom_field_id.setter
    def custom_field_id(self, custom_field_id):
        """
        Sets the custom_field_id of this Criterion.
        

        :param custom_field_id: The custom_field_id of this Criterion.
        :type: str
        """

        self._custom_field_id = custom_field_id

    @property
    def date_from(self):
        """
        Gets the date_from of this Criterion.
        

        :return: The date_from of this Criterion.
        :rtype: str
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """
        Sets the date_from of this Criterion.
        

        :param date_from: The date_from of this Criterion.
        :type: str
        """

        self._date_from = date_from

    @property
    def date_to(self):
        """
        Gets the date_to of this Criterion.
        

        :return: The date_to of this Criterion.
        :rtype: str
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """
        Sets the date_to of this Criterion.
        

        :param date_to: The date_to of this Criterion.
        :type: str
        """

        self._date_to = date_to

    @property
    def field(self):
        """
        Gets the field of this Criterion.
        

        :return: The field of this Criterion.
        :rtype: float
        """
        return self._field

    @field.setter
    def field(self, field):
        """
        Sets the field of this Criterion.
        

        :param field: The field of this Criterion.
        :type: float
        """

        self._field = field

    @property
    def id(self):
        """
        Gets the id of this Criterion.
        

        :return: The id of this Criterion.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Criterion.
        

        :param id: The id of this Criterion.
        :type: float
        """

        self._id = id

    @property
    def properties(self):
        """
        Gets the properties of this Criterion.
        

        :return: The properties of this Criterion.
        :rtype: str
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this Criterion.
        

        :param properties: The properties of this Criterion.
        :type: str
        """

        self._properties = properties

    @property
    def segment_id(self):
        """
        Gets the segment_id of this Criterion.
        

        :return: The segment_id of this Criterion.
        :rtype: float
        """
        return self._segment_id

    @segment_id.setter
    def segment_id(self, segment_id):
        """
        Sets the segment_id of this Criterion.
        

        :param segment_id: The segment_id of this Criterion.
        :type: float
        """

        self._segment_id = segment_id

    @property
    def subscriteria(self):
        """
        Gets the subscriteria of this Criterion.
        

        :return: The subscriteria of this Criterion.
        :rtype: str
        """
        return self._subscriteria

    @subscriteria.setter
    def subscriteria(self, subscriteria):
        """
        Sets the subscriteria of this Criterion.
        

        :param subscriteria: The subscriteria of this Criterion.
        :type: str
        """

        self._subscriteria = subscriteria

    @property
    def value(self):
        """
        Gets the value of this Criterion.
        

        :return: The value of this Criterion.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this Criterion.
        

        :param value: The value of this Criterion.
        :type: str
        """

        self._value = value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Criterion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

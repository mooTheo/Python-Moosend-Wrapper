# coding: utf-8

"""
    Moosend API

    TODO: Add a description

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReplyToEmail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_on': 'str',
        'dkim_public': 'str',
        'dkim_verified': 'bool',
        'email': 'str',
        'id': 'str',
        'is_enabled': 'bool',
        'name': 'str',
        'spf_verified': 'bool'
    }

    attribute_map = {
        'created_on': 'CreatedOn',
        'dkim_public': 'DkimPublic',
        'dkim_verified': 'DkimVerified',
        'email': 'Email',
        'id': 'ID',
        'is_enabled': 'IsEnabled',
        'name': 'Name',
        'spf_verified': 'SpfVerified'
    }

    def __init__(self, created_on=None, dkim_public=None, dkim_verified=None, email=None, id=None, is_enabled=None, name=None, spf_verified=None):
        """
        ReplyToEmail - a model defined in Swagger
        """

        self._created_on = None
        self._dkim_public = None
        self._dkim_verified = None
        self._email = None
        self._id = None
        self._is_enabled = None
        self._name = None
        self._spf_verified = None

        if created_on is not None:
          self.created_on = created_on
        if dkim_public is not None:
          self.dkim_public = dkim_public
        if dkim_verified is not None:
          self.dkim_verified = dkim_verified
        if email is not None:
          self.email = email
        if id is not None:
          self.id = id
        if is_enabled is not None:
          self.is_enabled = is_enabled
        if name is not None:
          self.name = name
        if spf_verified is not None:
          self.spf_verified = spf_verified

    @property
    def created_on(self):
        """
        Gets the created_on of this ReplyToEmail.
        

        :return: The created_on of this ReplyToEmail.
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this ReplyToEmail.
        

        :param created_on: The created_on of this ReplyToEmail.
        :type: str
        """

        self._created_on = created_on

    @property
    def dkim_public(self):
        """
        Gets the dkim_public of this ReplyToEmail.
        

        :return: The dkim_public of this ReplyToEmail.
        :rtype: str
        """
        return self._dkim_public

    @dkim_public.setter
    def dkim_public(self, dkim_public):
        """
        Sets the dkim_public of this ReplyToEmail.
        

        :param dkim_public: The dkim_public of this ReplyToEmail.
        :type: str
        """

        self._dkim_public = dkim_public

    @property
    def dkim_verified(self):
        """
        Gets the dkim_verified of this ReplyToEmail.
        

        :return: The dkim_verified of this ReplyToEmail.
        :rtype: bool
        """
        return self._dkim_verified

    @dkim_verified.setter
    def dkim_verified(self, dkim_verified):
        """
        Sets the dkim_verified of this ReplyToEmail.
        

        :param dkim_verified: The dkim_verified of this ReplyToEmail.
        :type: bool
        """

        self._dkim_verified = dkim_verified

    @property
    def email(self):
        """
        Gets the email of this ReplyToEmail.
        

        :return: The email of this ReplyToEmail.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this ReplyToEmail.
        

        :param email: The email of this ReplyToEmail.
        :type: str
        """

        self._email = email

    @property
    def id(self):
        """
        Gets the id of this ReplyToEmail.
        

        :return: The id of this ReplyToEmail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ReplyToEmail.
        

        :param id: The id of this ReplyToEmail.
        :type: str
        """

        self._id = id

    @property
    def is_enabled(self):
        """
        Gets the is_enabled of this ReplyToEmail.
        

        :return: The is_enabled of this ReplyToEmail.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """
        Sets the is_enabled of this ReplyToEmail.
        

        :param is_enabled: The is_enabled of this ReplyToEmail.
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def name(self):
        """
        Gets the name of this ReplyToEmail.
        

        :return: The name of this ReplyToEmail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ReplyToEmail.
        

        :param name: The name of this ReplyToEmail.
        :type: str
        """

        self._name = name

    @property
    def spf_verified(self):
        """
        Gets the spf_verified of this ReplyToEmail.
        

        :return: The spf_verified of this ReplyToEmail.
        :rtype: bool
        """
        return self._spf_verified

    @spf_verified.setter
    def spf_verified(self, spf_verified):
        """
        Sets the spf_verified of this ReplyToEmail.
        

        :param spf_verified: The spf_verified of this ReplyToEmail.
        :type: bool
        """

        self._spf_verified = spf_verified

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReplyToEmail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

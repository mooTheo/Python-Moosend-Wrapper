# coding: utf-8

"""
    Moosend API

    TODO: Add a description

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UpdatingACustomFieldRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'custom_field_type': 'str',
        'options': 'str',
        'is_required': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'custom_field_type': 'CustomFieldType',
        'options': 'Options',
        'is_required': 'IsRequired'
    }

    def __init__(self, name=None, custom_field_type=None, options=None, is_required=None):
        """
        UpdatingACustomFieldRequest - a model defined in Swagger
        """

        self._name = None
        self._custom_field_type = None
        self._options = None
        self._is_required = None

        self.name = name
        if custom_field_type is not None:
          self.custom_field_type = custom_field_type
        if options is not None:
          self.options = options
        if is_required is not None:
          self.is_required = is_required

    @property
    def name(self):
        """
        Gets the name of this UpdatingACustomFieldRequest.
        The name of the custom field.

        :return: The name of this UpdatingACustomFieldRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this UpdatingACustomFieldRequest.
        The name of the custom field.

        :param name: The name of this UpdatingACustomFieldRequest.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def custom_field_type(self):
        """
        Gets the custom_field_type of this UpdatingACustomFieldRequest.
        Specifies the data type of the custom field. This must be one of the following values. If omitted, Text will be assumed. * `Text` * `Decimal` * `DateTime` * `SingleSelectDropdown` * `Integer` * `CheckBox`

        :return: The custom_field_type of this UpdatingACustomFieldRequest.
        :rtype: str
        """
        return self._custom_field_type

    @custom_field_type.setter
    def custom_field_type(self, custom_field_type):
        """
        Sets the custom_field_type of this UpdatingACustomFieldRequest.
        Specifies the data type of the custom field. This must be one of the following values. If omitted, Text will be assumed. * `Text` * `Decimal` * `DateTime` * `SingleSelectDropdown` * `Integer` * `CheckBox`

        :param custom_field_type: The custom_field_type of this UpdatingACustomFieldRequest.
        :type: str
        """

        self._custom_field_type = custom_field_type

    @property
    def options(self):
        """
        Gets the options of this UpdatingACustomFieldRequest.
        If you want to create a custom field of type SingleSelectDropdown, you must set this parameter to specify the available options for the user to choose from. Use a comma (,) to separate different options.

        :return: The options of this UpdatingACustomFieldRequest.
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this UpdatingACustomFieldRequest.
        If you want to create a custom field of type SingleSelectDropdown, you must set this parameter to specify the available options for the user to choose from. Use a comma (,) to separate different options.

        :param options: The options of this UpdatingACustomFieldRequest.
        :type: str
        """

        self._options = options

    @property
    def is_required(self):
        """
        Gets the is_required of this UpdatingACustomFieldRequest.
        Specify whether this is field will be mandatory on not, when being used in a subscription form. You should specify a value of either true or false. If omitted, false will be assumed.

        :return: The is_required of this UpdatingACustomFieldRequest.
        :rtype: str
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """
        Sets the is_required of this UpdatingACustomFieldRequest.
        Specify whether this is field will be mandatory on not, when being used in a subscription form. You should specify a value of either true or false. If omitted, false will be assumed.

        :param is_required: The is_required of this UpdatingACustomFieldRequest.
        :type: str
        """

        self._is_required = is_required

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UpdatingACustomFieldRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# coding: utf-8

"""
    Moosend API

    TODO: Add a description

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MailingList85(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mailing_list_id': 'str',
        'segment_id': 'float'
    }

    attribute_map = {
        'mailing_list_id': 'MailingListID',
        'segment_id': 'SegmentID'
    }

    def __init__(self, mailing_list_id=None, segment_id=None):
        """
        MailingList85 - a model defined in Swagger
        """

        self._mailing_list_id = None
        self._segment_id = None

        if mailing_list_id is not None:
          self.mailing_list_id = mailing_list_id
        if segment_id is not None:
          self.segment_id = segment_id

    @property
    def mailing_list_id(self):
        """
        Gets the mailing_list_id of this MailingList85.
        

        :return: The mailing_list_id of this MailingList85.
        :rtype: str
        """
        return self._mailing_list_id

    @mailing_list_id.setter
    def mailing_list_id(self, mailing_list_id):
        """
        Sets the mailing_list_id of this MailingList85.
        

        :param mailing_list_id: The mailing_list_id of this MailingList85.
        :type: str
        """

        self._mailing_list_id = mailing_list_id

    @property
    def segment_id(self):
        """
        Gets the segment_id of this MailingList85.
        

        :return: The segment_id of this MailingList85.
        :rtype: float
        """
        return self._segment_id

    @segment_id.setter
    def segment_id(self, segment_id):
        """
        Sets the segment_id of this MailingList85.
        

        :param segment_id: The segment_id of this MailingList85.
        :type: float
        """

        self._segment_id = segment_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MailingList85):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

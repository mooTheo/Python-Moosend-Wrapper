# coding: utf-8

"""
    Moosend API

    TODO: Add a description

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomFieldsDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'str',
        'id': 'str',
        'is_required': 'bool',
        'name': 'str',
        'type': 'float'
    }

    attribute_map = {
        'context': 'Context',
        'id': 'ID',
        'is_required': 'IsRequired',
        'name': 'Name',
        'type': 'Type'
    }

    def __init__(self, context=None, id=None, is_required=None, name=None, type=None):
        """
        CustomFieldsDefinition - a model defined in Swagger
        """

        self._context = None
        self._id = None
        self._is_required = None
        self._name = None
        self._type = None

        if context is not None:
          self.context = context
        if id is not None:
          self.id = id
        if is_required is not None:
          self.is_required = is_required
        if name is not None:
          self.name = name
        if type is not None:
          self.type = type

    @property
    def context(self):
        """
        Gets the context of this CustomFieldsDefinition.
        

        :return: The context of this CustomFieldsDefinition.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """
        Sets the context of this CustomFieldsDefinition.
        

        :param context: The context of this CustomFieldsDefinition.
        :type: str
        """

        self._context = context

    @property
    def id(self):
        """
        Gets the id of this CustomFieldsDefinition.
        

        :return: The id of this CustomFieldsDefinition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CustomFieldsDefinition.
        

        :param id: The id of this CustomFieldsDefinition.
        :type: str
        """

        self._id = id

    @property
    def is_required(self):
        """
        Gets the is_required of this CustomFieldsDefinition.
        

        :return: The is_required of this CustomFieldsDefinition.
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """
        Sets the is_required of this CustomFieldsDefinition.
        

        :param is_required: The is_required of this CustomFieldsDefinition.
        :type: bool
        """

        self._is_required = is_required

    @property
    def name(self):
        """
        Gets the name of this CustomFieldsDefinition.
        

        :return: The name of this CustomFieldsDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CustomFieldsDefinition.
        

        :param name: The name of this CustomFieldsDefinition.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this CustomFieldsDefinition.
        

        :return: The type of this CustomFieldsDefinition.
        :rtype: float
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CustomFieldsDefinition.
        

        :param type: The type of this CustomFieldsDefinition.
        :type: float
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomFieldsDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# coding: utf-8

"""
    Moosend API

    TODO: Add a description

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SegmentsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def adding_criteria_to_segments(self, format, mailing_list_id, apikey, segment_id, body, **kwargs):
        """
        Adding criteria to segments
        Adds a new criterion (a rule) to the specified segment.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.adding_criteria_to_segments(format, mailing_list_id, apikey, segment_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str format:  (required)
        :param str mailing_list_id: The ID of the mailing list the specified segment belongs. (required)
        :param str apikey: You may find your API Key or generate a new one in your account settings. (required)
        :param str segment_id: The ID of the segment to update. (required)
        :param AddingCriteriaToSegmentsRequest body:  (required)
        :return: AddingCriteriaToSegmentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.adding_criteria_to_segments_with_http_info(format, mailing_list_id, apikey, segment_id, body, **kwargs)
        else:
            (data) = self.adding_criteria_to_segments_with_http_info(format, mailing_list_id, apikey, segment_id, body, **kwargs)
            return data

    def adding_criteria_to_segments_with_http_info(self, format, mailing_list_id, apikey, segment_id, body, **kwargs):
        """
        Adding criteria to segments
        Adds a new criterion (a rule) to the specified segment.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.adding_criteria_to_segments_with_http_info(format, mailing_list_id, apikey, segment_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str format:  (required)
        :param str mailing_list_id: The ID of the mailing list the specified segment belongs. (required)
        :param str apikey: You may find your API Key or generate a new one in your account settings. (required)
        :param str segment_id: The ID of the segment to update. (required)
        :param AddingCriteriaToSegmentsRequest body:  (required)
        :return: AddingCriteriaToSegmentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'mailing_list_id', 'apikey', 'segment_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adding_criteria_to_segments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params) or (params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `adding_criteria_to_segments`")
        # verify the required parameter 'mailing_list_id' is set
        if ('mailing_list_id' not in params) or (params['mailing_list_id'] is None):
            raise ValueError("Missing the required parameter `mailing_list_id` when calling `adding_criteria_to_segments`")
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params) or (params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `adding_criteria_to_segments`")
        # verify the required parameter 'segment_id' is set
        if ('segment_id' not in params) or (params['segment_id'] is None):
            raise ValueError("Missing the required parameter `segment_id` when calling `adding_criteria_to_segments`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adding_criteria_to_segments`")


        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['Format'] = params['format']
        if 'mailing_list_id' in params:
            path_params['MailingListID'] = params['mailing_list_id']
        if 'segment_id' in params:
            path_params['SegmentID'] = params['segment_id']

        query_params = []
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/lists/{MailingListID}/segments/{SegmentID}/criteria/add.{Format}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AddingCriteriaToSegmentsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def creating_a_new_segment(self, format, mailing_list_id, apikey, body, **kwargs):
        """
        Creating a new segment
        Creates a new empty segment (without criteria) for the given mailing list. You may specify the name of the segment and the way the criteria will match together.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.creating_a_new_segment(format, mailing_list_id, apikey, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str format:  (required)
        :param str mailing_list_id: The ID of the mailing list the specified segment belongs (required)
        :param str apikey: You may find your API Key or generate a new one in your account settings. (required)
        :param CreatingANewSegmentRequest body:  (required)
        :return: CreatingANewSegmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.creating_a_new_segment_with_http_info(format, mailing_list_id, apikey, body, **kwargs)
        else:
            (data) = self.creating_a_new_segment_with_http_info(format, mailing_list_id, apikey, body, **kwargs)
            return data

    def creating_a_new_segment_with_http_info(self, format, mailing_list_id, apikey, body, **kwargs):
        """
        Creating a new segment
        Creates a new empty segment (without criteria) for the given mailing list. You may specify the name of the segment and the way the criteria will match together.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.creating_a_new_segment_with_http_info(format, mailing_list_id, apikey, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str format:  (required)
        :param str mailing_list_id: The ID of the mailing list the specified segment belongs (required)
        :param str apikey: You may find your API Key or generate a new one in your account settings. (required)
        :param CreatingANewSegmentRequest body:  (required)
        :return: CreatingANewSegmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'mailing_list_id', 'apikey', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method creating_a_new_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params) or (params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `creating_a_new_segment`")
        # verify the required parameter 'mailing_list_id' is set
        if ('mailing_list_id' not in params) or (params['mailing_list_id'] is None):
            raise ValueError("Missing the required parameter `mailing_list_id` when calling `creating_a_new_segment`")
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params) or (params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `creating_a_new_segment`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `creating_a_new_segment`")


        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['Format'] = params['format']
        if 'mailing_list_id' in params:
            path_params['MailingListID'] = params['mailing_list_id']

        query_params = []
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/lists/{MailingListID}/segments/create.{Format}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CreatingANewSegmentResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def deleting_a_segment(self, format, mailing_list_id, apikey, segment_id, **kwargs):
        """
        Deleting A Segment
        Deletes a segment along with its criteria from the mailing list. The subscribers of the mailing list that the segment returned are not deleted or affected in any way.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deleting_a_segment(format, mailing_list_id, apikey, segment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str format:  (required)
        :param str mailing_list_id: The ID of the mailing list the specified segment belongs. (required)
        :param str apikey: You may find your API Key or generate a new one in your account settings. (required)
        :param str segment_id: The ID of the segment to update. (required)
        :return: DeletingASegmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deleting_a_segment_with_http_info(format, mailing_list_id, apikey, segment_id, **kwargs)
        else:
            (data) = self.deleting_a_segment_with_http_info(format, mailing_list_id, apikey, segment_id, **kwargs)
            return data

    def deleting_a_segment_with_http_info(self, format, mailing_list_id, apikey, segment_id, **kwargs):
        """
        Deleting A Segment
        Deletes a segment along with its criteria from the mailing list. The subscribers of the mailing list that the segment returned are not deleted or affected in any way.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deleting_a_segment_with_http_info(format, mailing_list_id, apikey, segment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str format:  (required)
        :param str mailing_list_id: The ID of the mailing list the specified segment belongs. (required)
        :param str apikey: You may find your API Key or generate a new one in your account settings. (required)
        :param str segment_id: The ID of the segment to update. (required)
        :return: DeletingASegmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'mailing_list_id', 'apikey', 'segment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deleting_a_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params) or (params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `deleting_a_segment`")
        # verify the required parameter 'mailing_list_id' is set
        if ('mailing_list_id' not in params) or (params['mailing_list_id'] is None):
            raise ValueError("Missing the required parameter `mailing_list_id` when calling `deleting_a_segment`")
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params) or (params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `deleting_a_segment`")
        # verify the required parameter 'segment_id' is set
        if ('segment_id' not in params) or (params['segment_id'] is None):
            raise ValueError("Missing the required parameter `segment_id` when calling `deleting_a_segment`")


        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['Format'] = params['format']
        if 'mailing_list_id' in params:
            path_params['MailingListID'] = params['mailing_list_id']
        if 'segment_id' in params:
            path_params['SegmentID'] = params['segment_id']

        query_params = []
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/lists/{MailingListID}/segments/{SegmentID}/delete.{Format}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeletingASegmentResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def getting_segment_details(self, format, mailing_list_id, segment_id, apikey, **kwargs):
        """
        Getting segment details
        Gets detailed information on a specific segment and its criteria. However, it does not include the subscribers returned by the segment.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getting_segment_details(format, mailing_list_id, segment_id, apikey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str format:  (required)
        :param str mailing_list_id: The ID of the mailing list the specified segment belongs (required)
        :param str segment_id: The ID of the segment to fetch results for. (required)
        :param str apikey: You may find your API Key or generate a new one in your account settings. (required)
        :return: GettingSegmentDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.getting_segment_details_with_http_info(format, mailing_list_id, segment_id, apikey, **kwargs)
        else:
            (data) = self.getting_segment_details_with_http_info(format, mailing_list_id, segment_id, apikey, **kwargs)
            return data

    def getting_segment_details_with_http_info(self, format, mailing_list_id, segment_id, apikey, **kwargs):
        """
        Getting segment details
        Gets detailed information on a specific segment and its criteria. However, it does not include the subscribers returned by the segment.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getting_segment_details_with_http_info(format, mailing_list_id, segment_id, apikey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str format:  (required)
        :param str mailing_list_id: The ID of the mailing list the specified segment belongs (required)
        :param str segment_id: The ID of the segment to fetch results for. (required)
        :param str apikey: You may find your API Key or generate a new one in your account settings. (required)
        :return: GettingSegmentDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'mailing_list_id', 'segment_id', 'apikey']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getting_segment_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params) or (params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `getting_segment_details`")
        # verify the required parameter 'mailing_list_id' is set
        if ('mailing_list_id' not in params) or (params['mailing_list_id'] is None):
            raise ValueError("Missing the required parameter `mailing_list_id` when calling `getting_segment_details`")
        # verify the required parameter 'segment_id' is set
        if ('segment_id' not in params) or (params['segment_id'] is None):
            raise ValueError("Missing the required parameter `segment_id` when calling `getting_segment_details`")
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params) or (params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `getting_segment_details`")


        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['Format'] = params['format']
        if 'mailing_list_id' in params:
            path_params['MailingListID'] = params['mailing_list_id']
        if 'segment_id' in params:
            path_params['SegmentID'] = params['segment_id']

        query_params = []
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/lists/{MailingListID}/segments/{SegmentID}/details.{Format}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GettingSegmentDetailsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def getting_segment_subscribers(self, format, mailing_list_id, segment_id, apikey, **kwargs):
        """
        Getting segment subscribers
        Gets a list of the subscribers that the specified segment returns according to its criteria. Because the results for this call could be quite big, paging information is required as input.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getting_segment_subscribers(format, mailing_list_id, segment_id, apikey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str format:  (required)
        :param str mailing_list_id: The ID of the mailing list the specified segment belongs (required)
        :param str segment_id: The ID of the segment to fetch results for. (required)
        :param str apikey: You may find your API Key or generate a new one in your account settings. (required)
        :return: GettingSegmentSubscribersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.getting_segment_subscribers_with_http_info(format, mailing_list_id, segment_id, apikey, **kwargs)
        else:
            (data) = self.getting_segment_subscribers_with_http_info(format, mailing_list_id, segment_id, apikey, **kwargs)
            return data

    def getting_segment_subscribers_with_http_info(self, format, mailing_list_id, segment_id, apikey, **kwargs):
        """
        Getting segment subscribers
        Gets a list of the subscribers that the specified segment returns according to its criteria. Because the results for this call could be quite big, paging information is required as input.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getting_segment_subscribers_with_http_info(format, mailing_list_id, segment_id, apikey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str format:  (required)
        :param str mailing_list_id: The ID of the mailing list the specified segment belongs (required)
        :param str segment_id: The ID of the segment to fetch results for. (required)
        :param str apikey: You may find your API Key or generate a new one in your account settings. (required)
        :return: GettingSegmentSubscribersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'mailing_list_id', 'segment_id', 'apikey']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getting_segment_subscribers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params) or (params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `getting_segment_subscribers`")
        # verify the required parameter 'mailing_list_id' is set
        if ('mailing_list_id' not in params) or (params['mailing_list_id'] is None):
            raise ValueError("Missing the required parameter `mailing_list_id` when calling `getting_segment_subscribers`")
        # verify the required parameter 'segment_id' is set
        if ('segment_id' not in params) or (params['segment_id'] is None):
            raise ValueError("Missing the required parameter `segment_id` when calling `getting_segment_subscribers`")
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params) or (params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `getting_segment_subscribers`")


        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['Format'] = params['format']
        if 'mailing_list_id' in params:
            path_params['MailingListID'] = params['mailing_list_id']
        if 'segment_id' in params:
            path_params['SegmentID'] = params['segment_id']

        query_params = []
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/lists/{MailingListID}/segments/{SegmentID}/members.{Format}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GettingSegmentSubscribersResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def getting_segments(self, format, mailing_list_id, apikey, **kwargs):
        """
        Getting segments
        Get a list of all segments with their criteria for the given mailing list.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getting_segments(format, mailing_list_id, apikey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str format:  (required)
        :param str mailing_list_id:  (required)
        :param str apikey: You may find your API Key or generate a new one in your account settings. (required)
        :return: GettingSegmentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.getting_segments_with_http_info(format, mailing_list_id, apikey, **kwargs)
        else:
            (data) = self.getting_segments_with_http_info(format, mailing_list_id, apikey, **kwargs)
            return data

    def getting_segments_with_http_info(self, format, mailing_list_id, apikey, **kwargs):
        """
        Getting segments
        Get a list of all segments with their criteria for the given mailing list.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getting_segments_with_http_info(format, mailing_list_id, apikey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str format:  (required)
        :param str mailing_list_id:  (required)
        :param str apikey: You may find your API Key or generate a new one in your account settings. (required)
        :return: GettingSegmentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'mailing_list_id', 'apikey']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getting_segments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params) or (params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `getting_segments`")
        # verify the required parameter 'mailing_list_id' is set
        if ('mailing_list_id' not in params) or (params['mailing_list_id'] is None):
            raise ValueError("Missing the required parameter `mailing_list_id` when calling `getting_segments`")
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params) or (params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `getting_segments`")


        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['Format'] = params['format']
        if 'mailing_list_id' in params:
            path_params['MailingListID'] = params['mailing_list_id']

        query_params = []
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/lists/{MailingListID}/segments.{Format}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GettingSegmentsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def updating_a_segment(self, format, mailing_list_id, apikey, segment_id, body, **kwargs):
        """
        Updating a segment
        Updates the properties of an existing segment. You may update the name and match type of the segment.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.updating_a_segment(format, mailing_list_id, apikey, segment_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str format:  (required)
        :param str mailing_list_id: The ID of the mailing list the specified segment belongs (required)
        :param str apikey: You may find your API Key or generate a new one in your account settings. (required)
        :param str segment_id: The ID of the segment to update. (required)
        :param UpdatingASegmentRequest body:  (required)
        :return: UpdatingASegmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.updating_a_segment_with_http_info(format, mailing_list_id, apikey, segment_id, body, **kwargs)
        else:
            (data) = self.updating_a_segment_with_http_info(format, mailing_list_id, apikey, segment_id, body, **kwargs)
            return data

    def updating_a_segment_with_http_info(self, format, mailing_list_id, apikey, segment_id, body, **kwargs):
        """
        Updating a segment
        Updates the properties of an existing segment. You may update the name and match type of the segment.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.updating_a_segment_with_http_info(format, mailing_list_id, apikey, segment_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str format:  (required)
        :param str mailing_list_id: The ID of the mailing list the specified segment belongs (required)
        :param str apikey: You may find your API Key or generate a new one in your account settings. (required)
        :param str segment_id: The ID of the segment to update. (required)
        :param UpdatingASegmentRequest body:  (required)
        :return: UpdatingASegmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'mailing_list_id', 'apikey', 'segment_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updating_a_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params) or (params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `updating_a_segment`")
        # verify the required parameter 'mailing_list_id' is set
        if ('mailing_list_id' not in params) or (params['mailing_list_id'] is None):
            raise ValueError("Missing the required parameter `mailing_list_id` when calling `updating_a_segment`")
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params) or (params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `updating_a_segment`")
        # verify the required parameter 'segment_id' is set
        if ('segment_id' not in params) or (params['segment_id'] is None):
            raise ValueError("Missing the required parameter `segment_id` when calling `updating_a_segment`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `updating_a_segment`")


        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['Format'] = params['format']
        if 'mailing_list_id' in params:
            path_params['MailingListID'] = params['mailing_list_id']
        if 'segment_id' in params:
            path_params['SegmentID'] = params['segment_id']

        query_params = []
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/lists/{MailingListID}/segments/{SegmentID}/update.{Format}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdatingASegmentResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def updating_segment_criteria(self, format, mailing_list_id, apikey, segment_id, criteria_id, body, **kwargs):
        """
        Updating segment criteria
        Updates an existing criterion in the specified segment.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.updating_segment_criteria(format, mailing_list_id, apikey, segment_id, criteria_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str format:  (required)
        :param str mailing_list_id: The ID of the mailing list the specified segment belongs. (required)
        :param str apikey: You may find your API Key or generate a new one in your account settings. (required)
        :param str segment_id: The ID of the segment to update. (required)
        :param float criteria_id: The ID of the criterion to process. (required)
        :param UpdatingSegmentCriteriaRequest body:  (required)
        :return: UpdatingSegmentCriteriaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.updating_segment_criteria_with_http_info(format, mailing_list_id, apikey, segment_id, criteria_id, body, **kwargs)
        else:
            (data) = self.updating_segment_criteria_with_http_info(format, mailing_list_id, apikey, segment_id, criteria_id, body, **kwargs)
            return data

    def updating_segment_criteria_with_http_info(self, format, mailing_list_id, apikey, segment_id, criteria_id, body, **kwargs):
        """
        Updating segment criteria
        Updates an existing criterion in the specified segment.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.updating_segment_criteria_with_http_info(format, mailing_list_id, apikey, segment_id, criteria_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str format:  (required)
        :param str mailing_list_id: The ID of the mailing list the specified segment belongs. (required)
        :param str apikey: You may find your API Key or generate a new one in your account settings. (required)
        :param str segment_id: The ID of the segment to update. (required)
        :param float criteria_id: The ID of the criterion to process. (required)
        :param UpdatingSegmentCriteriaRequest body:  (required)
        :return: UpdatingSegmentCriteriaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'mailing_list_id', 'apikey', 'segment_id', 'criteria_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updating_segment_criteria" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params) or (params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `updating_segment_criteria`")
        # verify the required parameter 'mailing_list_id' is set
        if ('mailing_list_id' not in params) or (params['mailing_list_id'] is None):
            raise ValueError("Missing the required parameter `mailing_list_id` when calling `updating_segment_criteria`")
        # verify the required parameter 'apikey' is set
        if ('apikey' not in params) or (params['apikey'] is None):
            raise ValueError("Missing the required parameter `apikey` when calling `updating_segment_criteria`")
        # verify the required parameter 'segment_id' is set
        if ('segment_id' not in params) or (params['segment_id'] is None):
            raise ValueError("Missing the required parameter `segment_id` when calling `updating_segment_criteria`")
        # verify the required parameter 'criteria_id' is set
        if ('criteria_id' not in params) or (params['criteria_id'] is None):
            raise ValueError("Missing the required parameter `criteria_id` when calling `updating_segment_criteria`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `updating_segment_criteria`")


        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['Format'] = params['format']
        if 'mailing_list_id' in params:
            path_params['MailingListID'] = params['mailing_list_id']
        if 'segment_id' in params:
            path_params['SegmentID'] = params['segment_id']
        if 'criteria_id' in params:
            path_params['CriteriaID'] = params['criteria_id']

        query_params = []
        if 'apikey' in params:
            query_params.append(('apikey', params['apikey']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/lists/{MailingListID}/segments/{SegmentID}/criteria/{CriteriaID}/update.{Format}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdatingSegmentCriteriaResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

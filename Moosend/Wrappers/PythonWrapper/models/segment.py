# coding: utf-8

"""
    Moosend API

    TODO: Add a description

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Segment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'created_on': 'str',
        'criteria': 'list[Criterion]',
        'description': 'str',
        'fetch_type': 'float',
        'fetch_value': 'float',
        'id': 'float',
        'match_type': 'float',
        'name': 'str',
        'updated_by': 'str',
        'updated_on': 'str'
    }

    attribute_map = {
        'created_by': 'CreatedBy',
        'created_on': 'CreatedOn',
        'criteria': 'Criteria',
        'description': 'Description',
        'fetch_type': 'FetchType',
        'fetch_value': 'FetchValue',
        'id': 'ID',
        'match_type': 'MatchType',
        'name': 'Name',
        'updated_by': 'UpdatedBy',
        'updated_on': 'UpdatedOn'
    }

    def __init__(self, created_by=None, created_on=None, criteria=None, description=None, fetch_type=None, fetch_value=None, id=None, match_type=None, name=None, updated_by=None, updated_on=None):
        """
        Segment - a model defined in Swagger
        """

        self._created_by = None
        self._created_on = None
        self._criteria = None
        self._description = None
        self._fetch_type = None
        self._fetch_value = None
        self._id = None
        self._match_type = None
        self._name = None
        self._updated_by = None
        self._updated_on = None

        if created_by is not None:
          self.created_by = created_by
        if created_on is not None:
          self.created_on = created_on
        if criteria is not None:
          self.criteria = criteria
        if description is not None:
          self.description = description
        if fetch_type is not None:
          self.fetch_type = fetch_type
        if fetch_value is not None:
          self.fetch_value = fetch_value
        if id is not None:
          self.id = id
        if match_type is not None:
          self.match_type = match_type
        if name is not None:
          self.name = name
        if updated_by is not None:
          self.updated_by = updated_by
        if updated_on is not None:
          self.updated_on = updated_on

    @property
    def created_by(self):
        """
        Gets the created_by of this Segment.
        

        :return: The created_by of this Segment.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this Segment.
        

        :param created_by: The created_by of this Segment.
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """
        Gets the created_on of this Segment.
        

        :return: The created_on of this Segment.
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this Segment.
        

        :param created_on: The created_on of this Segment.
        :type: str
        """

        self._created_on = created_on

    @property
    def criteria(self):
        """
        Gets the criteria of this Segment.
        

        :return: The criteria of this Segment.
        :rtype: list[Criterion]
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """
        Sets the criteria of this Segment.
        

        :param criteria: The criteria of this Segment.
        :type: list[Criterion]
        """

        self._criteria = criteria

    @property
    def description(self):
        """
        Gets the description of this Segment.
        

        :return: The description of this Segment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Segment.
        

        :param description: The description of this Segment.
        :type: str
        """

        self._description = description

    @property
    def fetch_type(self):
        """
        Gets the fetch_type of this Segment.
        

        :return: The fetch_type of this Segment.
        :rtype: float
        """
        return self._fetch_type

    @fetch_type.setter
    def fetch_type(self, fetch_type):
        """
        Sets the fetch_type of this Segment.
        

        :param fetch_type: The fetch_type of this Segment.
        :type: float
        """

        self._fetch_type = fetch_type

    @property
    def fetch_value(self):
        """
        Gets the fetch_value of this Segment.
        

        :return: The fetch_value of this Segment.
        :rtype: float
        """
        return self._fetch_value

    @fetch_value.setter
    def fetch_value(self, fetch_value):
        """
        Sets the fetch_value of this Segment.
        

        :param fetch_value: The fetch_value of this Segment.
        :type: float
        """

        self._fetch_value = fetch_value

    @property
    def id(self):
        """
        Gets the id of this Segment.
        

        :return: The id of this Segment.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Segment.
        

        :param id: The id of this Segment.
        :type: float
        """

        self._id = id

    @property
    def match_type(self):
        """
        Gets the match_type of this Segment.
        

        :return: The match_type of this Segment.
        :rtype: float
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """
        Sets the match_type of this Segment.
        

        :param match_type: The match_type of this Segment.
        :type: float
        """

        self._match_type = match_type

    @property
    def name(self):
        """
        Gets the name of this Segment.
        

        :return: The name of this Segment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Segment.
        

        :param name: The name of this Segment.
        :type: str
        """

        self._name = name

    @property
    def updated_by(self):
        """
        Gets the updated_by of this Segment.
        

        :return: The updated_by of this Segment.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """
        Sets the updated_by of this Segment.
        

        :param updated_by: The updated_by of this Segment.
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_on(self):
        """
        Gets the updated_on of this Segment.
        

        :return: The updated_on of this Segment.
        :rtype: str
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """
        Sets the updated_on of this Segment.
        

        :param updated_on: The updated_on of this Segment.
        :type: str
        """

        self._updated_on = updated_on

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Segment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

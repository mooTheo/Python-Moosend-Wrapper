# coding: utf-8

"""
    Moosend API

    TODO: Add a description

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Context52(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_on': 'str',
        'custom_fields': 'list[CustomField53]',
        'email': 'str',
        'id': 'str',
        'name': 'str',
        'removed_on': 'str',
        'subscribe_method': 'float',
        'subscribe_type': 'float',
        'unsubscribed_from_id': 'str',
        'unsubscribed_on': 'str',
        'updated_on': 'str'
    }

    attribute_map = {
        'created_on': 'CreatedOn',
        'custom_fields': 'CustomFields',
        'email': 'Email',
        'id': 'ID',
        'name': 'Name',
        'removed_on': 'RemovedOn',
        'subscribe_method': 'SubscribeMethod',
        'subscribe_type': 'SubscribeType',
        'unsubscribed_from_id': 'UnsubscribedFromID',
        'unsubscribed_on': 'UnsubscribedOn',
        'updated_on': 'UpdatedOn'
    }

    def __init__(self, created_on=None, custom_fields=None, email=None, id=None, name=None, removed_on=None, subscribe_method=None, subscribe_type=None, unsubscribed_from_id=None, unsubscribed_on=None, updated_on=None):
        """
        Context52 - a model defined in Swagger
        """

        self._created_on = None
        self._custom_fields = None
        self._email = None
        self._id = None
        self._name = None
        self._removed_on = None
        self._subscribe_method = None
        self._subscribe_type = None
        self._unsubscribed_from_id = None
        self._unsubscribed_on = None
        self._updated_on = None

        if created_on is not None:
          self.created_on = created_on
        if custom_fields is not None:
          self.custom_fields = custom_fields
        if email is not None:
          self.email = email
        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if removed_on is not None:
          self.removed_on = removed_on
        if subscribe_method is not None:
          self.subscribe_method = subscribe_method
        if subscribe_type is not None:
          self.subscribe_type = subscribe_type
        if unsubscribed_from_id is not None:
          self.unsubscribed_from_id = unsubscribed_from_id
        if unsubscribed_on is not None:
          self.unsubscribed_on = unsubscribed_on
        if updated_on is not None:
          self.updated_on = updated_on

    @property
    def created_on(self):
        """
        Gets the created_on of this Context52.
        

        :return: The created_on of this Context52.
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this Context52.
        

        :param created_on: The created_on of this Context52.
        :type: str
        """

        self._created_on = created_on

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this Context52.
        

        :return: The custom_fields of this Context52.
        :rtype: list[CustomField53]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this Context52.
        

        :param custom_fields: The custom_fields of this Context52.
        :type: list[CustomField53]
        """

        self._custom_fields = custom_fields

    @property
    def email(self):
        """
        Gets the email of this Context52.
        

        :return: The email of this Context52.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Context52.
        

        :param email: The email of this Context52.
        :type: str
        """

        self._email = email

    @property
    def id(self):
        """
        Gets the id of this Context52.
        

        :return: The id of this Context52.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Context52.
        

        :param id: The id of this Context52.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Context52.
        

        :return: The name of this Context52.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Context52.
        

        :param name: The name of this Context52.
        :type: str
        """

        self._name = name

    @property
    def removed_on(self):
        """
        Gets the removed_on of this Context52.
        

        :return: The removed_on of this Context52.
        :rtype: str
        """
        return self._removed_on

    @removed_on.setter
    def removed_on(self, removed_on):
        """
        Sets the removed_on of this Context52.
        

        :param removed_on: The removed_on of this Context52.
        :type: str
        """

        self._removed_on = removed_on

    @property
    def subscribe_method(self):
        """
        Gets the subscribe_method of this Context52.
        

        :return: The subscribe_method of this Context52.
        :rtype: float
        """
        return self._subscribe_method

    @subscribe_method.setter
    def subscribe_method(self, subscribe_method):
        """
        Sets the subscribe_method of this Context52.
        

        :param subscribe_method: The subscribe_method of this Context52.
        :type: float
        """

        self._subscribe_method = subscribe_method

    @property
    def subscribe_type(self):
        """
        Gets the subscribe_type of this Context52.
        

        :return: The subscribe_type of this Context52.
        :rtype: float
        """
        return self._subscribe_type

    @subscribe_type.setter
    def subscribe_type(self, subscribe_type):
        """
        Sets the subscribe_type of this Context52.
        

        :param subscribe_type: The subscribe_type of this Context52.
        :type: float
        """

        self._subscribe_type = subscribe_type

    @property
    def unsubscribed_from_id(self):
        """
        Gets the unsubscribed_from_id of this Context52.
        

        :return: The unsubscribed_from_id of this Context52.
        :rtype: str
        """
        return self._unsubscribed_from_id

    @unsubscribed_from_id.setter
    def unsubscribed_from_id(self, unsubscribed_from_id):
        """
        Sets the unsubscribed_from_id of this Context52.
        

        :param unsubscribed_from_id: The unsubscribed_from_id of this Context52.
        :type: str
        """

        self._unsubscribed_from_id = unsubscribed_from_id

    @property
    def unsubscribed_on(self):
        """
        Gets the unsubscribed_on of this Context52.
        

        :return: The unsubscribed_on of this Context52.
        :rtype: str
        """
        return self._unsubscribed_on

    @unsubscribed_on.setter
    def unsubscribed_on(self, unsubscribed_on):
        """
        Sets the unsubscribed_on of this Context52.
        

        :param unsubscribed_on: The unsubscribed_on of this Context52.
        :type: str
        """

        self._unsubscribed_on = unsubscribed_on

    @property
    def updated_on(self):
        """
        Gets the updated_on of this Context52.
        

        :return: The updated_on of this Context52.
        :rtype: str
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """
        Sets the updated_on of this Context52.
        

        :param updated_on: The updated_on of this Context52.
        :type: str
        """

        self._updated_on = updated_on

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Context52):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# coding: utf-8

"""
    Moosend API

    TODO: Add a description

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Context118(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ab_version': 'str',
        'campaign_delivered_on': 'str',
        'campaign_id': 'str',
        'campaign_is_archived': 'bool',
        'campaign_name': 'str',
        'campaign_subject': 'str',
        '_from': 'str',
        'mailing_lists': 'list[MailingLists119]',
        'sent': 'float',
        'to': 'str',
        'total_bounces': 'float',
        'total_complaints': 'float',
        'total_forwards': 'float',
        'total_link_clicks': 'float',
        'total_opens': 'float',
        'total_unsubscribes': 'float',
        'unique_forwards': 'float',
        'unique_link_clicks': 'float',
        'unique_opens': 'float'
    }

    attribute_map = {
        'ab_version': 'ABVersion',
        'campaign_delivered_on': 'CampaignDeliveredOn',
        'campaign_id': 'CampaignID',
        'campaign_is_archived': 'CampaignIsArchived',
        'campaign_name': 'CampaignName',
        'campaign_subject': 'CampaignSubject',
        '_from': 'From',
        'mailing_lists': 'MailingLists',
        'sent': 'Sent',
        'to': 'To',
        'total_bounces': 'TotalBounces',
        'total_complaints': 'TotalComplaints',
        'total_forwards': 'TotalForwards',
        'total_link_clicks': 'TotalLinkClicks',
        'total_opens': 'TotalOpens',
        'total_unsubscribes': 'TotalUnsubscribes',
        'unique_forwards': 'UniqueForwards',
        'unique_link_clicks': 'UniqueLinkClicks',
        'unique_opens': 'UniqueOpens'
    }

    def __init__(self, ab_version=None, campaign_delivered_on=None, campaign_id=None, campaign_is_archived=None, campaign_name=None, campaign_subject=None, _from=None, mailing_lists=None, sent=None, to=None, total_bounces=None, total_complaints=None, total_forwards=None, total_link_clicks=None, total_opens=None, total_unsubscribes=None, unique_forwards=None, unique_link_clicks=None, unique_opens=None):
        """
        Context118 - a model defined in Swagger
        """

        self._ab_version = None
        self._campaign_delivered_on = None
        self._campaign_id = None
        self._campaign_is_archived = None
        self._campaign_name = None
        self._campaign_subject = None
        self.__from = None
        self._mailing_lists = None
        self._sent = None
        self._to = None
        self._total_bounces = None
        self._total_complaints = None
        self._total_forwards = None
        self._total_link_clicks = None
        self._total_opens = None
        self._total_unsubscribes = None
        self._unique_forwards = None
        self._unique_link_clicks = None
        self._unique_opens = None

        if ab_version is not None:
          self.ab_version = ab_version
        if campaign_delivered_on is not None:
          self.campaign_delivered_on = campaign_delivered_on
        if campaign_id is not None:
          self.campaign_id = campaign_id
        if campaign_is_archived is not None:
          self.campaign_is_archived = campaign_is_archived
        if campaign_name is not None:
          self.campaign_name = campaign_name
        if campaign_subject is not None:
          self.campaign_subject = campaign_subject
        if _from is not None:
          self._from = _from
        if mailing_lists is not None:
          self.mailing_lists = mailing_lists
        if sent is not None:
          self.sent = sent
        if to is not None:
          self.to = to
        if total_bounces is not None:
          self.total_bounces = total_bounces
        if total_complaints is not None:
          self.total_complaints = total_complaints
        if total_forwards is not None:
          self.total_forwards = total_forwards
        if total_link_clicks is not None:
          self.total_link_clicks = total_link_clicks
        if total_opens is not None:
          self.total_opens = total_opens
        if total_unsubscribes is not None:
          self.total_unsubscribes = total_unsubscribes
        if unique_forwards is not None:
          self.unique_forwards = unique_forwards
        if unique_link_clicks is not None:
          self.unique_link_clicks = unique_link_clicks
        if unique_opens is not None:
          self.unique_opens = unique_opens

    @property
    def ab_version(self):
        """
        Gets the ab_version of this Context118.
        

        :return: The ab_version of this Context118.
        :rtype: str
        """
        return self._ab_version

    @ab_version.setter
    def ab_version(self, ab_version):
        """
        Sets the ab_version of this Context118.
        

        :param ab_version: The ab_version of this Context118.
        :type: str
        """

        self._ab_version = ab_version

    @property
    def campaign_delivered_on(self):
        """
        Gets the campaign_delivered_on of this Context118.
        

        :return: The campaign_delivered_on of this Context118.
        :rtype: str
        """
        return self._campaign_delivered_on

    @campaign_delivered_on.setter
    def campaign_delivered_on(self, campaign_delivered_on):
        """
        Sets the campaign_delivered_on of this Context118.
        

        :param campaign_delivered_on: The campaign_delivered_on of this Context118.
        :type: str
        """

        self._campaign_delivered_on = campaign_delivered_on

    @property
    def campaign_id(self):
        """
        Gets the campaign_id of this Context118.
        

        :return: The campaign_id of this Context118.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """
        Sets the campaign_id of this Context118.
        

        :param campaign_id: The campaign_id of this Context118.
        :type: str
        """

        self._campaign_id = campaign_id

    @property
    def campaign_is_archived(self):
        """
        Gets the campaign_is_archived of this Context118.
        

        :return: The campaign_is_archived of this Context118.
        :rtype: bool
        """
        return self._campaign_is_archived

    @campaign_is_archived.setter
    def campaign_is_archived(self, campaign_is_archived):
        """
        Sets the campaign_is_archived of this Context118.
        

        :param campaign_is_archived: The campaign_is_archived of this Context118.
        :type: bool
        """

        self._campaign_is_archived = campaign_is_archived

    @property
    def campaign_name(self):
        """
        Gets the campaign_name of this Context118.
        

        :return: The campaign_name of this Context118.
        :rtype: str
        """
        return self._campaign_name

    @campaign_name.setter
    def campaign_name(self, campaign_name):
        """
        Sets the campaign_name of this Context118.
        

        :param campaign_name: The campaign_name of this Context118.
        :type: str
        """

        self._campaign_name = campaign_name

    @property
    def campaign_subject(self):
        """
        Gets the campaign_subject of this Context118.
        

        :return: The campaign_subject of this Context118.
        :rtype: str
        """
        return self._campaign_subject

    @campaign_subject.setter
    def campaign_subject(self, campaign_subject):
        """
        Sets the campaign_subject of this Context118.
        

        :param campaign_subject: The campaign_subject of this Context118.
        :type: str
        """

        self._campaign_subject = campaign_subject

    @property
    def _from(self):
        """
        Gets the _from of this Context118.
        

        :return: The _from of this Context118.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this Context118.
        

        :param _from: The _from of this Context118.
        :type: str
        """

        self.__from = _from

    @property
    def mailing_lists(self):
        """
        Gets the mailing_lists of this Context118.
        

        :return: The mailing_lists of this Context118.
        :rtype: list[MailingLists119]
        """
        return self._mailing_lists

    @mailing_lists.setter
    def mailing_lists(self, mailing_lists):
        """
        Sets the mailing_lists of this Context118.
        

        :param mailing_lists: The mailing_lists of this Context118.
        :type: list[MailingLists119]
        """

        self._mailing_lists = mailing_lists

    @property
    def sent(self):
        """
        Gets the sent of this Context118.
        

        :return: The sent of this Context118.
        :rtype: float
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """
        Sets the sent of this Context118.
        

        :param sent: The sent of this Context118.
        :type: float
        """

        self._sent = sent

    @property
    def to(self):
        """
        Gets the to of this Context118.
        

        :return: The to of this Context118.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """
        Sets the to of this Context118.
        

        :param to: The to of this Context118.
        :type: str
        """

        self._to = to

    @property
    def total_bounces(self):
        """
        Gets the total_bounces of this Context118.
        

        :return: The total_bounces of this Context118.
        :rtype: float
        """
        return self._total_bounces

    @total_bounces.setter
    def total_bounces(self, total_bounces):
        """
        Sets the total_bounces of this Context118.
        

        :param total_bounces: The total_bounces of this Context118.
        :type: float
        """

        self._total_bounces = total_bounces

    @property
    def total_complaints(self):
        """
        Gets the total_complaints of this Context118.
        

        :return: The total_complaints of this Context118.
        :rtype: float
        """
        return self._total_complaints

    @total_complaints.setter
    def total_complaints(self, total_complaints):
        """
        Sets the total_complaints of this Context118.
        

        :param total_complaints: The total_complaints of this Context118.
        :type: float
        """

        self._total_complaints = total_complaints

    @property
    def total_forwards(self):
        """
        Gets the total_forwards of this Context118.
        

        :return: The total_forwards of this Context118.
        :rtype: float
        """
        return self._total_forwards

    @total_forwards.setter
    def total_forwards(self, total_forwards):
        """
        Sets the total_forwards of this Context118.
        

        :param total_forwards: The total_forwards of this Context118.
        :type: float
        """

        self._total_forwards = total_forwards

    @property
    def total_link_clicks(self):
        """
        Gets the total_link_clicks of this Context118.
        

        :return: The total_link_clicks of this Context118.
        :rtype: float
        """
        return self._total_link_clicks

    @total_link_clicks.setter
    def total_link_clicks(self, total_link_clicks):
        """
        Sets the total_link_clicks of this Context118.
        

        :param total_link_clicks: The total_link_clicks of this Context118.
        :type: float
        """

        self._total_link_clicks = total_link_clicks

    @property
    def total_opens(self):
        """
        Gets the total_opens of this Context118.
        

        :return: The total_opens of this Context118.
        :rtype: float
        """
        return self._total_opens

    @total_opens.setter
    def total_opens(self, total_opens):
        """
        Sets the total_opens of this Context118.
        

        :param total_opens: The total_opens of this Context118.
        :type: float
        """

        self._total_opens = total_opens

    @property
    def total_unsubscribes(self):
        """
        Gets the total_unsubscribes of this Context118.
        

        :return: The total_unsubscribes of this Context118.
        :rtype: float
        """
        return self._total_unsubscribes

    @total_unsubscribes.setter
    def total_unsubscribes(self, total_unsubscribes):
        """
        Sets the total_unsubscribes of this Context118.
        

        :param total_unsubscribes: The total_unsubscribes of this Context118.
        :type: float
        """

        self._total_unsubscribes = total_unsubscribes

    @property
    def unique_forwards(self):
        """
        Gets the unique_forwards of this Context118.
        

        :return: The unique_forwards of this Context118.
        :rtype: float
        """
        return self._unique_forwards

    @unique_forwards.setter
    def unique_forwards(self, unique_forwards):
        """
        Sets the unique_forwards of this Context118.
        

        :param unique_forwards: The unique_forwards of this Context118.
        :type: float
        """

        self._unique_forwards = unique_forwards

    @property
    def unique_link_clicks(self):
        """
        Gets the unique_link_clicks of this Context118.
        

        :return: The unique_link_clicks of this Context118.
        :rtype: float
        """
        return self._unique_link_clicks

    @unique_link_clicks.setter
    def unique_link_clicks(self, unique_link_clicks):
        """
        Sets the unique_link_clicks of this Context118.
        

        :param unique_link_clicks: The unique_link_clicks of this Context118.
        :type: float
        """

        self._unique_link_clicks = unique_link_clicks

    @property
    def unique_opens(self):
        """
        Gets the unique_opens of this Context118.
        

        :return: The unique_opens of this Context118.
        :rtype: float
        """
        return self._unique_opens

    @unique_opens.setter
    def unique_opens(self, unique_opens):
        """
        Sets the unique_opens of this Context118.
        

        :param unique_opens: The unique_opens of this Context118.
        :type: float
        """

        self._unique_opens = unique_opens

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Context118):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# coding: utf-8

"""
    Moosend API

    TODO: Add a description

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MailingList68(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'campaign': 'str',
        'mailing_list': 'MailingList69',
        'segment': 'str'
    }

    attribute_map = {
        'campaign': 'Campaign',
        'mailing_list': 'MailingList',
        'segment': 'Segment'
    }

    def __init__(self, campaign=None, mailing_list=None, segment=None):
        """
        MailingList68 - a model defined in Swagger
        """

        self._campaign = None
        self._mailing_list = None
        self._segment = None

        if campaign is not None:
          self.campaign = campaign
        if mailing_list is not None:
          self.mailing_list = mailing_list
        if segment is not None:
          self.segment = segment

    @property
    def campaign(self):
        """
        Gets the campaign of this MailingList68.
        

        :return: The campaign of this MailingList68.
        :rtype: str
        """
        return self._campaign

    @campaign.setter
    def campaign(self, campaign):
        """
        Sets the campaign of this MailingList68.
        

        :param campaign: The campaign of this MailingList68.
        :type: str
        """

        self._campaign = campaign

    @property
    def mailing_list(self):
        """
        Gets the mailing_list of this MailingList68.

        :return: The mailing_list of this MailingList68.
        :rtype: MailingList69
        """
        return self._mailing_list

    @mailing_list.setter
    def mailing_list(self, mailing_list):
        """
        Sets the mailing_list of this MailingList68.

        :param mailing_list: The mailing_list of this MailingList68.
        :type: MailingList69
        """

        self._mailing_list = mailing_list

    @property
    def segment(self):
        """
        Gets the segment of this MailingList68.
        

        :return: The segment of this MailingList68.
        :rtype: str
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """
        Sets the segment of this MailingList68.
        

        :param segment: The segment of this MailingList68.
        :type: str
        """

        self._segment = segment

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MailingList68):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

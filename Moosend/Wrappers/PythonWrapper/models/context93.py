# coding: utf-8

"""
    Moosend API

    TODO: Add a description

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Context93(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ab_campaign_data': 'ABCampaignData',
        'confirmation_to': 'str',
        'created_on': 'str',
        'delivered_on': 'str',
        'format_type': 'float',
        'html_content': 'str',
        'id': 'str',
        'is_transactional': 'bool',
        'mailing_lists': 'list[MailingList85]',
        'name': 'str',
        'plain_content': 'str',
        'reply_to_email': 'ReplyToEmail',
        'scheduled_for': 'str',
        'sender': 'Sender',
        'status': 'float',
        'subject': 'str',
        'timezone': 'str',
        'updated_on': 'str',
        'web_location': 'str'
    }

    attribute_map = {
        'ab_campaign_data': 'ABCampaignData',
        'confirmation_to': 'ConfirmationTo',
        'created_on': 'CreatedOn',
        'delivered_on': 'DeliveredOn',
        'format_type': 'FormatType',
        'html_content': 'HTMLContent',
        'id': 'ID',
        'is_transactional': 'IsTransactional',
        'mailing_lists': 'MailingLists',
        'name': 'Name',
        'plain_content': 'PlainContent',
        'reply_to_email': 'ReplyToEmail',
        'scheduled_for': 'ScheduledFor',
        'sender': 'Sender',
        'status': 'Status',
        'subject': 'Subject',
        'timezone': 'Timezone',
        'updated_on': 'UpdatedOn',
        'web_location': 'WebLocation'
    }

    def __init__(self, ab_campaign_data=None, confirmation_to=None, created_on=None, delivered_on=None, format_type=None, html_content=None, id=None, is_transactional=None, mailing_lists=None, name=None, plain_content=None, reply_to_email=None, scheduled_for=None, sender=None, status=None, subject=None, timezone=None, updated_on=None, web_location=None):
        """
        Context93 - a model defined in Swagger
        """

        self._ab_campaign_data = None
        self._confirmation_to = None
        self._created_on = None
        self._delivered_on = None
        self._format_type = None
        self._html_content = None
        self._id = None
        self._is_transactional = None
        self._mailing_lists = None
        self._name = None
        self._plain_content = None
        self._reply_to_email = None
        self._scheduled_for = None
        self._sender = None
        self._status = None
        self._subject = None
        self._timezone = None
        self._updated_on = None
        self._web_location = None

        if ab_campaign_data is not None:
          self.ab_campaign_data = ab_campaign_data
        if confirmation_to is not None:
          self.confirmation_to = confirmation_to
        if created_on is not None:
          self.created_on = created_on
        if delivered_on is not None:
          self.delivered_on = delivered_on
        if format_type is not None:
          self.format_type = format_type
        if html_content is not None:
          self.html_content = html_content
        if id is not None:
          self.id = id
        if is_transactional is not None:
          self.is_transactional = is_transactional
        if mailing_lists is not None:
          self.mailing_lists = mailing_lists
        if name is not None:
          self.name = name
        if plain_content is not None:
          self.plain_content = plain_content
        if reply_to_email is not None:
          self.reply_to_email = reply_to_email
        if scheduled_for is not None:
          self.scheduled_for = scheduled_for
        if sender is not None:
          self.sender = sender
        if status is not None:
          self.status = status
        if subject is not None:
          self.subject = subject
        if timezone is not None:
          self.timezone = timezone
        if updated_on is not None:
          self.updated_on = updated_on
        if web_location is not None:
          self.web_location = web_location

    @property
    def ab_campaign_data(self):
        """
        Gets the ab_campaign_data of this Context93.

        :return: The ab_campaign_data of this Context93.
        :rtype: ABCampaignData
        """
        return self._ab_campaign_data

    @ab_campaign_data.setter
    def ab_campaign_data(self, ab_campaign_data):
        """
        Sets the ab_campaign_data of this Context93.

        :param ab_campaign_data: The ab_campaign_data of this Context93.
        :type: ABCampaignData
        """

        self._ab_campaign_data = ab_campaign_data

    @property
    def confirmation_to(self):
        """
        Gets the confirmation_to of this Context93.
        

        :return: The confirmation_to of this Context93.
        :rtype: str
        """
        return self._confirmation_to

    @confirmation_to.setter
    def confirmation_to(self, confirmation_to):
        """
        Sets the confirmation_to of this Context93.
        

        :param confirmation_to: The confirmation_to of this Context93.
        :type: str
        """

        self._confirmation_to = confirmation_to

    @property
    def created_on(self):
        """
        Gets the created_on of this Context93.
        

        :return: The created_on of this Context93.
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this Context93.
        

        :param created_on: The created_on of this Context93.
        :type: str
        """

        self._created_on = created_on

    @property
    def delivered_on(self):
        """
        Gets the delivered_on of this Context93.
        

        :return: The delivered_on of this Context93.
        :rtype: str
        """
        return self._delivered_on

    @delivered_on.setter
    def delivered_on(self, delivered_on):
        """
        Sets the delivered_on of this Context93.
        

        :param delivered_on: The delivered_on of this Context93.
        :type: str
        """

        self._delivered_on = delivered_on

    @property
    def format_type(self):
        """
        Gets the format_type of this Context93.
        

        :return: The format_type of this Context93.
        :rtype: float
        """
        return self._format_type

    @format_type.setter
    def format_type(self, format_type):
        """
        Sets the format_type of this Context93.
        

        :param format_type: The format_type of this Context93.
        :type: float
        """

        self._format_type = format_type

    @property
    def html_content(self):
        """
        Gets the html_content of this Context93.
        

        :return: The html_content of this Context93.
        :rtype: str
        """
        return self._html_content

    @html_content.setter
    def html_content(self, html_content):
        """
        Sets the html_content of this Context93.
        

        :param html_content: The html_content of this Context93.
        :type: str
        """

        self._html_content = html_content

    @property
    def id(self):
        """
        Gets the id of this Context93.
        

        :return: The id of this Context93.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Context93.
        

        :param id: The id of this Context93.
        :type: str
        """

        self._id = id

    @property
    def is_transactional(self):
        """
        Gets the is_transactional of this Context93.
        

        :return: The is_transactional of this Context93.
        :rtype: bool
        """
        return self._is_transactional

    @is_transactional.setter
    def is_transactional(self, is_transactional):
        """
        Sets the is_transactional of this Context93.
        

        :param is_transactional: The is_transactional of this Context93.
        :type: bool
        """

        self._is_transactional = is_transactional

    @property
    def mailing_lists(self):
        """
        Gets the mailing_lists of this Context93.
        

        :return: The mailing_lists of this Context93.
        :rtype: list[MailingList85]
        """
        return self._mailing_lists

    @mailing_lists.setter
    def mailing_lists(self, mailing_lists):
        """
        Sets the mailing_lists of this Context93.
        

        :param mailing_lists: The mailing_lists of this Context93.
        :type: list[MailingList85]
        """

        self._mailing_lists = mailing_lists

    @property
    def name(self):
        """
        Gets the name of this Context93.
        

        :return: The name of this Context93.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Context93.
        

        :param name: The name of this Context93.
        :type: str
        """

        self._name = name

    @property
    def plain_content(self):
        """
        Gets the plain_content of this Context93.
        

        :return: The plain_content of this Context93.
        :rtype: str
        """
        return self._plain_content

    @plain_content.setter
    def plain_content(self, plain_content):
        """
        Sets the plain_content of this Context93.
        

        :param plain_content: The plain_content of this Context93.
        :type: str
        """

        self._plain_content = plain_content

    @property
    def reply_to_email(self):
        """
        Gets the reply_to_email of this Context93.

        :return: The reply_to_email of this Context93.
        :rtype: ReplyToEmail
        """
        return self._reply_to_email

    @reply_to_email.setter
    def reply_to_email(self, reply_to_email):
        """
        Sets the reply_to_email of this Context93.

        :param reply_to_email: The reply_to_email of this Context93.
        :type: ReplyToEmail
        """

        self._reply_to_email = reply_to_email

    @property
    def scheduled_for(self):
        """
        Gets the scheduled_for of this Context93.
        

        :return: The scheduled_for of this Context93.
        :rtype: str
        """
        return self._scheduled_for

    @scheduled_for.setter
    def scheduled_for(self, scheduled_for):
        """
        Sets the scheduled_for of this Context93.
        

        :param scheduled_for: The scheduled_for of this Context93.
        :type: str
        """

        self._scheduled_for = scheduled_for

    @property
    def sender(self):
        """
        Gets the sender of this Context93.

        :return: The sender of this Context93.
        :rtype: Sender
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """
        Sets the sender of this Context93.

        :param sender: The sender of this Context93.
        :type: Sender
        """

        self._sender = sender

    @property
    def status(self):
        """
        Gets the status of this Context93.
        

        :return: The status of this Context93.
        :rtype: float
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Context93.
        

        :param status: The status of this Context93.
        :type: float
        """

        self._status = status

    @property
    def subject(self):
        """
        Gets the subject of this Context93.
        

        :return: The subject of this Context93.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this Context93.
        

        :param subject: The subject of this Context93.
        :type: str
        """

        self._subject = subject

    @property
    def timezone(self):
        """
        Gets the timezone of this Context93.
        

        :return: The timezone of this Context93.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this Context93.
        

        :param timezone: The timezone of this Context93.
        :type: str
        """

        self._timezone = timezone

    @property
    def updated_on(self):
        """
        Gets the updated_on of this Context93.
        

        :return: The updated_on of this Context93.
        :rtype: str
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """
        Sets the updated_on of this Context93.
        

        :param updated_on: The updated_on of this Context93.
        :type: str
        """

        self._updated_on = updated_on

    @property
    def web_location(self):
        """
        Gets the web_location of this Context93.
        

        :return: The web_location of this Context93.
        :rtype: str
        """
        return self._web_location

    @web_location.setter
    def web_location(self, web_location):
        """
        Sets the web_location of this Context93.
        

        :param web_location: The web_location of this Context93.
        :type: str
        """

        self._web_location = web_location

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Context93):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

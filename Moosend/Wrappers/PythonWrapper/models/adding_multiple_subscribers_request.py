# coding: utf-8

"""
    Moosend API

    TODO: Add a description

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AddingMultipleSubscribersRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscribers': 'list[Subscribers]'
    }

    attribute_map = {
        'subscribers': 'Subscribers'
    }

    def __init__(self, subscribers=None):
        """
        AddingMultipleSubscribersRequest - a model defined in Swagger
        """

        self._subscribers = None

        self.subscribers = subscribers

    @property
    def subscribers(self):
        """
        Gets the subscribers of this AddingMultipleSubscribersRequest.
        A list of subscribers to add to the mailing list. You may specify the email address, the name and the custom fields for each subscriber. The following example demonstrates the format each subscriber should be written in your request, assuming that you also have two custom fields named Age and Country.

        :return: The subscribers of this AddingMultipleSubscribersRequest.
        :rtype: list[Subscribers]
        """
        return self._subscribers

    @subscribers.setter
    def subscribers(self, subscribers):
        """
        Sets the subscribers of this AddingMultipleSubscribersRequest.
        A list of subscribers to add to the mailing list. You may specify the email address, the name and the custom fields for each subscriber. The following example demonstrates the format each subscriber should be written in your request, assuming that you also have two custom fields named Age and Country.

        :param subscribers: The subscribers of this AddingMultipleSubscribersRequest.
        :type: list[Subscribers]
        """
        if subscribers is None:
            raise ValueError("Invalid value for `subscribers`, must not be `None`")

        self._subscribers = subscribers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AddingMultipleSubscribersRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
